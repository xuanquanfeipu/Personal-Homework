#include <bits/stdc++.h>

/*
	AES algorithm, written by n+e
	compile: g++ aes.cpp -oaes -O3
	usage: ./aes argv1 argv2
	argv1: 128, 192, 256
	argv2: 0 - single, !0 - cbc length
*/

// constants

// key expand
const uint32_t rcon[11] = { 0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36 };

// for subbytes
const uint8_t sbox[256] = {
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
};

const uint8_t sbox_inv[256] = {
	0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
	0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
	0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
	0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
	0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
	0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
	0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
	0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
	0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
	0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
	0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
	0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
	0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
	0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
	0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
	0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d,
};

// for shiftrows
									//	0	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15
const __uint128_t l3 = *(__uint128_t*) "\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00\x00"; // 4
const __uint128_t l2 = *(__uint128_t*) "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00"; // 8, 9
const __uint128_t l1 = *(__uint128_t*) "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff"; // 12, 13, 14
const __uint128_t  z = *(__uint128_t*) "\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"; // 0, 1, 2, 3
const __uint128_t r1 = *(__uint128_t*) "\x00\x00\x00\x00\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00"; // 5, 6, 7
const __uint128_t r2 = *(__uint128_t*) "\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00"; // 10, 11
const __uint128_t r3 = *(__uint128_t*) "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x00"; // 15

										//	0	1	2	3	4	5	6	7	8	9	10	11	12	13	14	15
const __uint128_t l3_ = *(__uint128_t*) "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff"; // 12
const __uint128_t l2_ = *(__uint128_t*) "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00"; // 8, 9
const __uint128_t l1_ = *(__uint128_t*) "\x00\x00\x00\x00\x00\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00"; // 4, 5, 6
const __uint128_t  z_ = *(__uint128_t*) "\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"; // 0, 1, 2, 3
const __uint128_t r1_ = *(__uint128_t*) "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\x00"; // 13, 14, 15
const __uint128_t r2_ = *(__uint128_t*) "\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00"; // 10, 11
const __uint128_t r3_ = *(__uint128_t*) "\x00\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"; // 7

// for mixcolumns

const uint8_t gf02[256] = {
	0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e, 
	0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e, 
	0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e, 
	0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e, 
	0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e, 
	0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe, 
	0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde, 
	0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe, 
	0x1b, 0x19, 0x1f, 0x1d, 0x13, 0x11, 0x17, 0x15, 0x0b, 0x09, 0x0f, 0x0d, 0x03, 0x01, 0x07, 0x05, 
	0x3b, 0x39, 0x3f, 0x3d, 0x33, 0x31, 0x37, 0x35, 0x2b, 0x29, 0x2f, 0x2d, 0x23, 0x21, 0x27, 0x25, 
	0x5b, 0x59, 0x5f, 0x5d, 0x53, 0x51, 0x57, 0x55, 0x4b, 0x49, 0x4f, 0x4d, 0x43, 0x41, 0x47, 0x45, 
	0x7b, 0x79, 0x7f, 0x7d, 0x73, 0x71, 0x77, 0x75, 0x6b, 0x69, 0x6f, 0x6d, 0x63, 0x61, 0x67, 0x65, 
	0x9b, 0x99, 0x9f, 0x9d, 0x93, 0x91, 0x97, 0x95, 0x8b, 0x89, 0x8f, 0x8d, 0x83, 0x81, 0x87, 0x85, 
	0xbb, 0xb9, 0xbf, 0xbd, 0xb3, 0xb1, 0xb7, 0xb5, 0xab, 0xa9, 0xaf, 0xad, 0xa3, 0xa1, 0xa7, 0xa5, 
	0xdb, 0xd9, 0xdf, 0xdd, 0xd3, 0xd1, 0xd7, 0xd5, 0xcb, 0xc9, 0xcf, 0xcd, 0xc3, 0xc1, 0xc7, 0xc5, 
	0xfb, 0xf9, 0xff, 0xfd, 0xf3, 0xf1, 0xf7, 0xf5, 0xeb, 0xe9, 0xef, 0xed, 0xe3, 0xe1, 0xe7, 0xe5, 
};

const uint8_t gf03[256] = {
	0x00, 0x03, 0x06, 0x05, 0x0c, 0x0f, 0x0a, 0x09, 0x18, 0x1b, 0x1e, 0x1d, 0x14, 0x17, 0x12, 0x11, 
	0x30, 0x33, 0x36, 0x35, 0x3c, 0x3f, 0x3a, 0x39, 0x28, 0x2b, 0x2e, 0x2d, 0x24, 0x27, 0x22, 0x21, 
	0x60, 0x63, 0x66, 0x65, 0x6c, 0x6f, 0x6a, 0x69, 0x78, 0x7b, 0x7e, 0x7d, 0x74, 0x77, 0x72, 0x71, 
	0x50, 0x53, 0x56, 0x55, 0x5c, 0x5f, 0x5a, 0x59, 0x48, 0x4b, 0x4e, 0x4d, 0x44, 0x47, 0x42, 0x41, 
	0xc0, 0xc3, 0xc6, 0xc5, 0xcc, 0xcf, 0xca, 0xc9, 0xd8, 0xdb, 0xde, 0xdd, 0xd4, 0xd7, 0xd2, 0xd1, 
	0xf0, 0xf3, 0xf6, 0xf5, 0xfc, 0xff, 0xfa, 0xf9, 0xe8, 0xeb, 0xee, 0xed, 0xe4, 0xe7, 0xe2, 0xe1, 
	0xa0, 0xa3, 0xa6, 0xa5, 0xac, 0xaf, 0xaa, 0xa9, 0xb8, 0xbb, 0xbe, 0xbd, 0xb4, 0xb7, 0xb2, 0xb1, 
	0x90, 0x93, 0x96, 0x95, 0x9c, 0x9f, 0x9a, 0x99, 0x88, 0x8b, 0x8e, 0x8d, 0x84, 0x87, 0x82, 0x81, 
	0x9b, 0x98, 0x9d, 0x9e, 0x97, 0x94, 0x91, 0x92, 0x83, 0x80, 0x85, 0x86, 0x8f, 0x8c, 0x89, 0x8a, 
	0xab, 0xa8, 0xad, 0xae, 0xa7, 0xa4, 0xa1, 0xa2, 0xb3, 0xb0, 0xb5, 0xb6, 0xbf, 0xbc, 0xb9, 0xba, 
	0xfb, 0xf8, 0xfd, 0xfe, 0xf7, 0xf4, 0xf1, 0xf2, 0xe3, 0xe0, 0xe5, 0xe6, 0xef, 0xec, 0xe9, 0xea, 
	0xcb, 0xc8, 0xcd, 0xce, 0xc7, 0xc4, 0xc1, 0xc2, 0xd3, 0xd0, 0xd5, 0xd6, 0xdf, 0xdc, 0xd9, 0xda, 
	0x5b, 0x58, 0x5d, 0x5e, 0x57, 0x54, 0x51, 0x52, 0x43, 0x40, 0x45, 0x46, 0x4f, 0x4c, 0x49, 0x4a, 
	0x6b, 0x68, 0x6d, 0x6e, 0x67, 0x64, 0x61, 0x62, 0x73, 0x70, 0x75, 0x76, 0x7f, 0x7c, 0x79, 0x7a, 
	0x3b, 0x38, 0x3d, 0x3e, 0x37, 0x34, 0x31, 0x32, 0x23, 0x20, 0x25, 0x26, 0x2f, 0x2c, 0x29, 0x2a, 
	0x0b, 0x08, 0x0d, 0x0e, 0x07, 0x04, 0x01, 0x02, 0x13, 0x10, 0x15, 0x16, 0x1f, 0x1c, 0x19, 0x1a, 
};

const uint8_t gf09[256] = {
	0x00, 0x09, 0x12, 0x1b, 0x24, 0x2d, 0x36, 0x3f, 0x48, 0x41, 0x5a, 0x53, 0x6c, 0x65, 0x7e, 0x77, 
	0x90, 0x99, 0x82, 0x8b, 0xb4, 0xbd, 0xa6, 0xaf, 0xd8, 0xd1, 0xca, 0xc3, 0xfc, 0xf5, 0xee, 0xe7, 
	0x3b, 0x32, 0x29, 0x20, 0x1f, 0x16, 0x0d, 0x04, 0x73, 0x7a, 0x61, 0x68, 0x57, 0x5e, 0x45, 0x4c, 
	0xab, 0xa2, 0xb9, 0xb0, 0x8f, 0x86, 0x9d, 0x94, 0xe3, 0xea, 0xf1, 0xf8, 0xc7, 0xce, 0xd5, 0xdc, 
	0x76, 0x7f, 0x64, 0x6d, 0x52, 0x5b, 0x40, 0x49, 0x3e, 0x37, 0x2c, 0x25, 0x1a, 0x13, 0x08, 0x01, 
	0xe6, 0xef, 0xf4, 0xfd, 0xc2, 0xcb, 0xd0, 0xd9, 0xae, 0xa7, 0xbc, 0xb5, 0x8a, 0x83, 0x98, 0x91, 
	0x4d, 0x44, 0x5f, 0x56, 0x69, 0x60, 0x7b, 0x72, 0x05, 0x0c, 0x17, 0x1e, 0x21, 0x28, 0x33, 0x3a, 
	0xdd, 0xd4, 0xcf, 0xc6, 0xf9, 0xf0, 0xeb, 0xe2, 0x95, 0x9c, 0x87, 0x8e, 0xb1, 0xb8, 0xa3, 0xaa, 
	0xec, 0xe5, 0xfe, 0xf7, 0xc8, 0xc1, 0xda, 0xd3, 0xa4, 0xad, 0xb6, 0xbf, 0x80, 0x89, 0x92, 0x9b, 
	0x7c, 0x75, 0x6e, 0x67, 0x58, 0x51, 0x4a, 0x43, 0x34, 0x3d, 0x26, 0x2f, 0x10, 0x19, 0x02, 0x0b, 
	0xd7, 0xde, 0xc5, 0xcc, 0xf3, 0xfa, 0xe1, 0xe8, 0x9f, 0x96, 0x8d, 0x84, 0xbb, 0xb2, 0xa9, 0xa0, 
	0x47, 0x4e, 0x55, 0x5c, 0x63, 0x6a, 0x71, 0x78, 0x0f, 0x06, 0x1d, 0x14, 0x2b, 0x22, 0x39, 0x30, 
	0x9a, 0x93, 0x88, 0x81, 0xbe, 0xb7, 0xac, 0xa5, 0xd2, 0xdb, 0xc0, 0xc9, 0xf6, 0xff, 0xe4, 0xed, 
	0x0a, 0x03, 0x18, 0x11, 0x2e, 0x27, 0x3c, 0x35, 0x42, 0x4b, 0x50, 0x59, 0x66, 0x6f, 0x74, 0x7d, 
	0xa1, 0xa8, 0xb3, 0xba, 0x85, 0x8c, 0x97, 0x9e, 0xe9, 0xe0, 0xfb, 0xf2, 0xcd, 0xc4, 0xdf, 0xd6, 
	0x31, 0x38, 0x23, 0x2a, 0x15, 0x1c, 0x07, 0x0e, 0x79, 0x70, 0x6b, 0x62, 0x5d, 0x54, 0x4f, 0x46, 
};

const uint8_t gf0b[256] = {
	0x00, 0x0b, 0x16, 0x1d, 0x2c, 0x27, 0x3a, 0x31, 0x58, 0x53, 0x4e, 0x45, 0x74, 0x7f, 0x62, 0x69, 
	0xb0, 0xbb, 0xa6, 0xad, 0x9c, 0x97, 0x8a, 0x81, 0xe8, 0xe3, 0xfe, 0xf5, 0xc4, 0xcf, 0xd2, 0xd9, 
	0x7b, 0x70, 0x6d, 0x66, 0x57, 0x5c, 0x41, 0x4a, 0x23, 0x28, 0x35, 0x3e, 0x0f, 0x04, 0x19, 0x12, 
	0xcb, 0xc0, 0xdd, 0xd6, 0xe7, 0xec, 0xf1, 0xfa, 0x93, 0x98, 0x85, 0x8e, 0xbf, 0xb4, 0xa9, 0xa2, 
	0xf6, 0xfd, 0xe0, 0xeb, 0xda, 0xd1, 0xcc, 0xc7, 0xae, 0xa5, 0xb8, 0xb3, 0x82, 0x89, 0x94, 0x9f, 
	0x46, 0x4d, 0x50, 0x5b, 0x6a, 0x61, 0x7c, 0x77, 0x1e, 0x15, 0x08, 0x03, 0x32, 0x39, 0x24, 0x2f, 
	0x8d, 0x86, 0x9b, 0x90, 0xa1, 0xaa, 0xb7, 0xbc, 0xd5, 0xde, 0xc3, 0xc8, 0xf9, 0xf2, 0xef, 0xe4, 
	0x3d, 0x36, 0x2b, 0x20, 0x11, 0x1a, 0x07, 0x0c, 0x65, 0x6e, 0x73, 0x78, 0x49, 0x42, 0x5f, 0x54, 
	0xf7, 0xfc, 0xe1, 0xea, 0xdb, 0xd0, 0xcd, 0xc6, 0xaf, 0xa4, 0xb9, 0xb2, 0x83, 0x88, 0x95, 0x9e, 
	0x47, 0x4c, 0x51, 0x5a, 0x6b, 0x60, 0x7d, 0x76, 0x1f, 0x14, 0x09, 0x02, 0x33, 0x38, 0x25, 0x2e, 
	0x8c, 0x87, 0x9a, 0x91, 0xa0, 0xab, 0xb6, 0xbd, 0xd4, 0xdf, 0xc2, 0xc9, 0xf8, 0xf3, 0xee, 0xe5, 
	0x3c, 0x37, 0x2a, 0x21, 0x10, 0x1b, 0x06, 0x0d, 0x64, 0x6f, 0x72, 0x79, 0x48, 0x43, 0x5e, 0x55, 
	0x01, 0x0a, 0x17, 0x1c, 0x2d, 0x26, 0x3b, 0x30, 0x59, 0x52, 0x4f, 0x44, 0x75, 0x7e, 0x63, 0x68, 
	0xb1, 0xba, 0xa7, 0xac, 0x9d, 0x96, 0x8b, 0x80, 0xe9, 0xe2, 0xff, 0xf4, 0xc5, 0xce, 0xd3, 0xd8, 
	0x7a, 0x71, 0x6c, 0x67, 0x56, 0x5d, 0x40, 0x4b, 0x22, 0x29, 0x34, 0x3f, 0x0e, 0x05, 0x18, 0x13, 
	0xca, 0xc1, 0xdc, 0xd7, 0xe6, 0xed, 0xf0, 0xfb, 0x92, 0x99, 0x84, 0x8f, 0xbe, 0xb5, 0xa8, 0xa3, 
};

const uint8_t gf0d[256] = {
	0x00, 0x0d, 0x1a, 0x17, 0x34, 0x39, 0x2e, 0x23, 0x68, 0x65, 0x72, 0x7f, 0x5c, 0x51, 0x46, 0x4b, 
	0xd0, 0xdd, 0xca, 0xc7, 0xe4, 0xe9, 0xfe, 0xf3, 0xb8, 0xb5, 0xa2, 0xaf, 0x8c, 0x81, 0x96, 0x9b, 
	0xbb, 0xb6, 0xa1, 0xac, 0x8f, 0x82, 0x95, 0x98, 0xd3, 0xde, 0xc9, 0xc4, 0xe7, 0xea, 0xfd, 0xf0, 
	0x6b, 0x66, 0x71, 0x7c, 0x5f, 0x52, 0x45, 0x48, 0x03, 0x0e, 0x19, 0x14, 0x37, 0x3a, 0x2d, 0x20, 
	0x6d, 0x60, 0x77, 0x7a, 0x59, 0x54, 0x43, 0x4e, 0x05, 0x08, 0x1f, 0x12, 0x31, 0x3c, 0x2b, 0x26, 
	0xbd, 0xb0, 0xa7, 0xaa, 0x89, 0x84, 0x93, 0x9e, 0xd5, 0xd8, 0xcf, 0xc2, 0xe1, 0xec, 0xfb, 0xf6, 
	0xd6, 0xdb, 0xcc, 0xc1, 0xe2, 0xef, 0xf8, 0xf5, 0xbe, 0xb3, 0xa4, 0xa9, 0x8a, 0x87, 0x90, 0x9d, 
	0x06, 0x0b, 0x1c, 0x11, 0x32, 0x3f, 0x28, 0x25, 0x6e, 0x63, 0x74, 0x79, 0x5a, 0x57, 0x40, 0x4d, 
	0xda, 0xd7, 0xc0, 0xcd, 0xee, 0xe3, 0xf4, 0xf9, 0xb2, 0xbf, 0xa8, 0xa5, 0x86, 0x8b, 0x9c, 0x91, 
	0x0a, 0x07, 0x10, 0x1d, 0x3e, 0x33, 0x24, 0x29, 0x62, 0x6f, 0x78, 0x75, 0x56, 0x5b, 0x4c, 0x41, 
	0x61, 0x6c, 0x7b, 0x76, 0x55, 0x58, 0x4f, 0x42, 0x09, 0x04, 0x13, 0x1e, 0x3d, 0x30, 0x27, 0x2a, 
	0xb1, 0xbc, 0xab, 0xa6, 0x85, 0x88, 0x9f, 0x92, 0xd9, 0xd4, 0xc3, 0xce, 0xed, 0xe0, 0xf7, 0xfa, 
	0xb7, 0xba, 0xad, 0xa0, 0x83, 0x8e, 0x99, 0x94, 0xdf, 0xd2, 0xc5, 0xc8, 0xeb, 0xe6, 0xf1, 0xfc, 
	0x67, 0x6a, 0x7d, 0x70, 0x53, 0x5e, 0x49, 0x44, 0x0f, 0x02, 0x15, 0x18, 0x3b, 0x36, 0x21, 0x2c, 
	0x0c, 0x01, 0x16, 0x1b, 0x38, 0x35, 0x22, 0x2f, 0x64, 0x69, 0x7e, 0x73, 0x50, 0x5d, 0x4a, 0x47, 
	0xdc, 0xd1, 0xc6, 0xcb, 0xe8, 0xe5, 0xf2, 0xff, 0xb4, 0xb9, 0xae, 0xa3, 0x80, 0x8d, 0x9a, 0x97, 
};

const uint8_t gf0e[256] = {
	0x00, 0x0e, 0x1c, 0x12, 0x38, 0x36, 0x24, 0x2a, 0x70, 0x7e, 0x6c, 0x62, 0x48, 0x46, 0x54, 0x5a, 
	0xe0, 0xee, 0xfc, 0xf2, 0xd8, 0xd6, 0xc4, 0xca, 0x90, 0x9e, 0x8c, 0x82, 0xa8, 0xa6, 0xb4, 0xba, 
	0xdb, 0xd5, 0xc7, 0xc9, 0xe3, 0xed, 0xff, 0xf1, 0xab, 0xa5, 0xb7, 0xb9, 0x93, 0x9d, 0x8f, 0x81, 
	0x3b, 0x35, 0x27, 0x29, 0x03, 0x0d, 0x1f, 0x11, 0x4b, 0x45, 0x57, 0x59, 0x73, 0x7d, 0x6f, 0x61, 
	0xad, 0xa3, 0xb1, 0xbf, 0x95, 0x9b, 0x89, 0x87, 0xdd, 0xd3, 0xc1, 0xcf, 0xe5, 0xeb, 0xf9, 0xf7, 
	0x4d, 0x43, 0x51, 0x5f, 0x75, 0x7b, 0x69, 0x67, 0x3d, 0x33, 0x21, 0x2f, 0x05, 0x0b, 0x19, 0x17, 
	0x76, 0x78, 0x6a, 0x64, 0x4e, 0x40, 0x52, 0x5c, 0x06, 0x08, 0x1a, 0x14, 0x3e, 0x30, 0x22, 0x2c, 
	0x96, 0x98, 0x8a, 0x84, 0xae, 0xa0, 0xb2, 0xbc, 0xe6, 0xe8, 0xfa, 0xf4, 0xde, 0xd0, 0xc2, 0xcc, 
	0x41, 0x4f, 0x5d, 0x53, 0x79, 0x77, 0x65, 0x6b, 0x31, 0x3f, 0x2d, 0x23, 0x09, 0x07, 0x15, 0x1b, 
	0xa1, 0xaf, 0xbd, 0xb3, 0x99, 0x97, 0x85, 0x8b, 0xd1, 0xdf, 0xcd, 0xc3, 0xe9, 0xe7, 0xf5, 0xfb, 
	0x9a, 0x94, 0x86, 0x88, 0xa2, 0xac, 0xbe, 0xb0, 0xea, 0xe4, 0xf6, 0xf8, 0xd2, 0xdc, 0xce, 0xc0, 
	0x7a, 0x74, 0x66, 0x68, 0x42, 0x4c, 0x5e, 0x50, 0x0a, 0x04, 0x16, 0x18, 0x32, 0x3c, 0x2e, 0x20, 
	0xec, 0xe2, 0xf0, 0xfe, 0xd4, 0xda, 0xc8, 0xc6, 0x9c, 0x92, 0x80, 0x8e, 0xa4, 0xaa, 0xb8, 0xb6, 
	0x0c, 0x02, 0x10, 0x1e, 0x34, 0x3a, 0x28, 0x26, 0x7c, 0x72, 0x60, 0x6e, 0x44, 0x4a, 0x58, 0x56, 
	0x37, 0x39, 0x2b, 0x25, 0x0f, 0x01, 0x13, 0x1d, 0x47, 0x49, 0x5b, 0x55, 0x7f, 0x71, 0x63, 0x6d, 
	0xd7, 0xd9, 0xcb, 0xc5, 0xef, 0xe1, 0xf3, 0xfd, 0xa7, 0xa9, 0xbb, 0xb5, 0x9f, 0x91, 0x83, 0x8d, 
};

// end of constants

__uint128_t subbytes(__uint128_t t) {
	uint8_t* ptr = (uint8_t*)(&t);
	for (int i = 0; i < 16; ++i)
		ptr[i] = sbox[ptr[i]];
	return t;
}

__uint128_t subbytes_inv(__uint128_t t) {
	uint8_t* ptr = (uint8_t*)(&t);
	for (int i = 0; i < 16; ++i)
		ptr[i] = sbox_inv[ptr[i]];
	return t;
}

__uint128_t shiftrows(__uint128_t t) {
	return ((t << 24) & l3) | ((t << 16) & l2) | ((t << 8) & l1) | (t & z) | ((t >> 8) & r1) | ((t >> 16) & r2) | ((t >> 24) & r3);
}

__uint128_t shiftrows_inv(__uint128_t t) {
	return ((t << 24) & l3_) | ((t << 16) & l2_) | ((t << 8) & l1_) | (t & z_) | ((t >> 8) & r1_) | ((t >> 16) & r2_) | ((t >> 24) & r3_);
}

__uint128_t mixcolumns(__uint128_t t) {
	__uint128_t f = 0;
	uint8_t* ptr_t = (uint8_t*)(&t);
	uint8_t* ptr_f = (uint8_t*)(&f);
	ptr_f[0]  = gf02[ptr_t[0]] ^ gf03[ptr_t[4]] ^ ptr_t[ 8] ^ ptr_t[12];
	ptr_f[1]  = gf02[ptr_t[1]] ^ gf03[ptr_t[5]] ^ ptr_t[ 9] ^ ptr_t[13];
	ptr_f[2]  = gf02[ptr_t[2]] ^ gf03[ptr_t[6]] ^ ptr_t[10] ^ ptr_t[14];
	ptr_f[3]  = gf02[ptr_t[3]] ^ gf03[ptr_t[7]] ^ ptr_t[11] ^ ptr_t[15];
	ptr_f[4]  = ptr_t[0] ^ gf02[ptr_t[4]] ^ gf03[ptr_t[ 8]] ^ ptr_t[12];
	ptr_f[5]  = ptr_t[1] ^ gf02[ptr_t[5]] ^ gf03[ptr_t[ 9]] ^ ptr_t[13];
	ptr_f[6]  = ptr_t[2] ^ gf02[ptr_t[6]] ^ gf03[ptr_t[10]] ^ ptr_t[14];
	ptr_f[7]  = ptr_t[3] ^ gf02[ptr_t[7]] ^ gf03[ptr_t[11]] ^ ptr_t[15];
	ptr_f[8]  = ptr_t[0] ^ ptr_t[4] ^ gf02[ptr_t[ 8]] ^ gf03[ptr_t[12]];
	ptr_f[9]  = ptr_t[1] ^ ptr_t[5] ^ gf02[ptr_t[ 9]] ^ gf03[ptr_t[13]];
	ptr_f[10] = ptr_t[2] ^ ptr_t[6] ^ gf02[ptr_t[10]] ^ gf03[ptr_t[14]];
	ptr_f[11] = ptr_t[3] ^ ptr_t[7] ^ gf02[ptr_t[11]] ^ gf03[ptr_t[15]];
	ptr_f[12] = gf03[ptr_t[0]] ^ ptr_t[4] ^ ptr_t[ 8] ^ gf02[ptr_t[12]];
	ptr_f[13] = gf03[ptr_t[1]] ^ ptr_t[5] ^ ptr_t[ 9] ^ gf02[ptr_t[13]];
	ptr_f[14] = gf03[ptr_t[2]] ^ ptr_t[6] ^ ptr_t[10] ^ gf02[ptr_t[14]];
	ptr_f[15] = gf03[ptr_t[3]] ^ ptr_t[7] ^ ptr_t[11] ^ gf02[ptr_t[15]];
	return f;
}

__uint128_t mixcolumns_inv(__uint128_t t) {
	__uint128_t f = 0;
	uint8_t* ptr_t = (uint8_t*)(&t);
	uint8_t* ptr_f = (uint8_t*)(&f);
	ptr_f[0]  = gf0e[ptr_t[0]] ^ gf0b[ptr_t[4]] ^ gf0d[ptr_t[ 8]] ^ gf09[ptr_t[12]];
	ptr_f[1]  = gf0e[ptr_t[1]] ^ gf0b[ptr_t[5]] ^ gf0d[ptr_t[ 9]] ^ gf09[ptr_t[13]];
	ptr_f[2]  = gf0e[ptr_t[2]] ^ gf0b[ptr_t[6]] ^ gf0d[ptr_t[10]] ^ gf09[ptr_t[14]];
	ptr_f[3]  = gf0e[ptr_t[3]] ^ gf0b[ptr_t[7]] ^ gf0d[ptr_t[11]] ^ gf09[ptr_t[15]];
	ptr_f[4]  = gf09[ptr_t[0]] ^ gf0e[ptr_t[4]] ^ gf0b[ptr_t[ 8]] ^ gf0d[ptr_t[12]];
	ptr_f[5]  = gf09[ptr_t[1]] ^ gf0e[ptr_t[5]] ^ gf0b[ptr_t[ 9]] ^ gf0d[ptr_t[13]];
	ptr_f[6]  = gf09[ptr_t[2]] ^ gf0e[ptr_t[6]] ^ gf0b[ptr_t[10]] ^ gf0d[ptr_t[14]];
	ptr_f[7]  = gf09[ptr_t[3]] ^ gf0e[ptr_t[7]] ^ gf0b[ptr_t[11]] ^ gf0d[ptr_t[15]];
	ptr_f[8]  = gf0d[ptr_t[0]] ^ gf09[ptr_t[4]] ^ gf0e[ptr_t[ 8]] ^ gf0b[ptr_t[12]];
	ptr_f[9]  = gf0d[ptr_t[1]] ^ gf09[ptr_t[5]] ^ gf0e[ptr_t[ 9]] ^ gf0b[ptr_t[13]];
	ptr_f[10] = gf0d[ptr_t[2]] ^ gf09[ptr_t[6]] ^ gf0e[ptr_t[10]] ^ gf0b[ptr_t[14]];
	ptr_f[11] = gf0d[ptr_t[3]] ^ gf09[ptr_t[7]] ^ gf0e[ptr_t[11]] ^ gf0b[ptr_t[15]];
	ptr_f[12] = gf0b[ptr_t[0]] ^ gf0d[ptr_t[4]] ^ gf09[ptr_t[ 8]] ^ gf0e[ptr_t[12]];
	ptr_f[13] = gf0b[ptr_t[1]] ^ gf0d[ptr_t[5]] ^ gf09[ptr_t[ 9]] ^ gf0e[ptr_t[13]];
	ptr_f[14] = gf0b[ptr_t[2]] ^ gf0d[ptr_t[6]] ^ gf09[ptr_t[10]] ^ gf0e[ptr_t[14]];
	ptr_f[15] = gf0b[ptr_t[3]] ^ gf0d[ptr_t[7]] ^ gf09[ptr_t[11]] ^ gf0e[ptr_t[15]];
	return f;
}

int Nk, Nr;
uint8_t *key;
uint32_t w[60];

void keyexpansion() {
	memcpy(w, (uint32_t*) key, Nk << 2);
	for (int i = Nk; i < 4 * (Nr + 1); ++i) {
		uint32_t tmp = w[i - 1];
		if (i % Nk == 0) {
			tmp = ((sbox[tmp & 0xff] << 8 | sbox[tmp >> 24]) << 8 | sbox[(tmp >> 16) & 0xff]) << 8 | sbox[(tmp >> 8) & 0xff];
			tmp ^= rcon[i / Nk];
		}
		else if (Nk > 6 && i % Nk == 4)
			tmp = ((sbox[tmp >> 24] << 8 | sbox[(tmp >> 16) & 0xff]) << 8 | sbox[(tmp >> 8) & 0xff]) << 8 | sbox[tmp & 0xff];
		w[i] = w[i - Nk] ^ tmp;
	}
}

__uint128_t addroundkey(__uint128_t t, int r) {
	uint8_t* ptr_t = (uint8_t*)(&t);
	uint8_t* ptr_w = (uint8_t*)(&w) + 16 * r;
	ptr_t[ 0] ^= ptr_w[0]; ptr_t[ 1] ^= ptr_w[4]; ptr_t[ 2] ^= ptr_w[ 8]; ptr_t[ 3] ^= ptr_w[12];
	ptr_t[ 4] ^= ptr_w[1]; ptr_t[ 5] ^= ptr_w[5]; ptr_t[ 6] ^= ptr_w[ 9]; ptr_t[ 7] ^= ptr_w[13];
	ptr_t[ 8] ^= ptr_w[2]; ptr_t[ 9] ^= ptr_w[6]; ptr_t[10] ^= ptr_w[10]; ptr_t[11] ^= ptr_w[14];
	ptr_t[12] ^= ptr_w[3]; ptr_t[13] ^= ptr_w[7]; ptr_t[14] ^= ptr_w[11]; ptr_t[15] ^= ptr_w[15];
	return t;
}

void init(int opt=128) {
	if (opt == 128) {
		// aes-128
		key = (__uint8_t*) "\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f";
		Nk = 4;
		Nr = 10;
	}
	else if (opt == 192) {
		// aes-192
		key = (__uint8_t*) "\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17";
		Nk = 6;
		Nr = 12;
	}
	else if (opt == 256) {
		// aes-256
		key = (__uint8_t*) "\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f";
		Nk = 8;
		Nr = 14;
	}
	keyexpansion();
}

__uint128_t transpose(__uint128_t t) {
	__uint128_t f = t;
	uint8_t* ptr_t = (uint8_t*)(&t);
	uint8_t* ptr_f = (uint8_t*)(&f);
	ptr_f[ 1] = ptr_t[ 4]; ptr_f[ 4] = ptr_t[ 1];
	ptr_f[ 2] = ptr_t[ 8]; ptr_f[ 8] = ptr_t[ 2];
	ptr_f[ 3] = ptr_t[12]; ptr_f[12] = ptr_t[ 3];
	ptr_f[ 6] = ptr_t[ 9]; ptr_f[ 9] = ptr_t[ 6];
	ptr_f[ 7] = ptr_t[13]; ptr_f[13] = ptr_t[ 7];
	ptr_f[11] = ptr_t[14]; ptr_f[14] = ptr_t[11];
	return f;
}

void print(__uint128_t t, int transpose=1) {
	uint8_t* ptr = (uint8_t*)(&t);
	for (int i = 0; i < 4; ++i, printf(" "))
		for (int j = 0; j < 4; ++j)
		printf("%02x", ptr[transpose ? j * 4 + i : i * 4 + j]);
	puts("");
}

__uint128_t crypto(__uint128_t t) {
	t = addroundkey(transpose(t), 0);
	for (int i = 1; i < Nr; ++i)
		t = addroundkey(mixcolumns(shiftrows(subbytes(t))), i);
	return transpose(addroundkey(shiftrows(subbytes(t)), Nr));
}

__uint128_t decrypto(__uint128_t t) {
	t = addroundkey(transpose(t), Nr);
	for (int i = Nr - 1; i > 0; --i)
		t = mixcolumns_inv(addroundkey(subbytes_inv(shiftrows_inv(t)), i));
	return transpose(addroundkey(subbytes_inv(shiftrows_inv(t)), 0));
}

// code for test

void test() {
	__uint128_t x = *(__uint128_t*) "\xe5\x4a\x06\x0a\x98\x69\x10\xbd\x1c\xa9\xe8\x54\x43\xbb\x83\xdb";
	print(x, 0);
	x = transpose(x);
	x = subbytes(x);
	x = subbytes_inv(x);
	x = subbytes(x);
	print(x);
	x = shiftrows(x);
	x = shiftrows_inv(x);
	x = shiftrows(x);
	print(x);
	x = mixcolumns(x);
	x = mixcolumns_inv(x);
	x = mixcolumns(x);
	x = transpose(x);
	print(x, 0);
	__uint128_t y = *(__uint128_t*) "\x9b\x3f\xdd\x7b\x69\xb3\xff\x3b\x13\x98\x26\xce\xbf\xc8\x23\x72";
	assert(x == y);
}

int main(int argc, char const *argv[])
{
	init(atoi(argv[1]));
	if (atoi(argv[2]) == 0) {
		__uint128_t x = *(__uint128_t*) "\xe5\x4b\x04\x09\x9c\x6c\x16\xba\x14\xa0\xe2\x5f\x4f\xb6\x8d\xd4";
		printf("origin  : "); print(x, 0);
		x = crypto(x);
		printf("crypto  : "); print(x, 0);
		x = decrypto(x);
		printf("decrypto: "); print(x, 0);
	}
	else {
		int len = atoi(argv[2]);
		__uint128_t iv = 0;
		uint8_t *str = new uint8_t[len + 16];
		for (int i = 0; i < len; ++i) {
			str[i] = rand() & 0xff;
			// printf("%02x", str[i]);
		}
		// puts("");
		double t0 = clock();
		for (int i = 0; i < len; i += 16) {
			__uint128_t x = *(__uint128_t*)(&str[i]);
			*(__uint128_t*)(&str[i]) = iv = crypto(x ^ iv);
		}
		// for (int i = 0; i < len + 16; ++i) {
		// 	printf("%02x", str[i]);
		// }
		// puts("");
		printf("use %lfs\n", (clock() - t0) / CLOCKS_PER_SEC);
	}
	return 0;
}